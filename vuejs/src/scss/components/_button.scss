@import "../settings/variables";
@import "../utils/functions";

$button-border-radius: 5px !default;

$button-sizes: (
  initial: 0.9rem,
  small: 0.75rem,
  large: 1.25rem,
) !default;

$button-palette: $palette !default;

$button-fill: solid !default;
$button-bg-color: map-get($button-palette, initial) !default;
$button-color: $darker-color !default;

@mixin button-base() {
  cursor: pointer;
  text-transform: uppercase;
  border-width: 1px;
  border-style: solid;
  border-radius: 5px;
  padding: 0.8em 1.2em;
  font-size: map-get($button-sizes, initial);
  margin: 0.2rem;
}

@mixin button-sizes() {
  @each $size, $value in map-remove($button-sizes, initial) {
    &.#{$size} {
      font-size: $value;
    }
  }
}

@mixin button-solid($bg-color: $button-bg-color, $color: $button-color) {
  background-color: $bg-color;
  border-color: darken($bg-color, 5);

  @if ($color == auto) {
    $color: choose-contrast-color($bg-color);
  }

  color: $color;

  &:hover {
    background-color: darken($bg-color, 4);
  }
}

@mixin button-hollow {
  &,
  &.disabled,
  &[disabled] {
    &,
    &:hover,
    &:focus {
      background-color: transparent;
    }
  }
}

@mixin button-clear {
  &,
  &.disabled,
  &[disabled] {
    &,
    &:hover,
    &:focus {
      border-color: transparent;
      background-color: transparent;
    }
  }
}

@mixin button-fill($fill: $button-fill, $bg-color: $button-bg-color) {
  @if ($fill == solid) {
    @include button-solid($bg-color, auto);
  } @else if $fill == hollow {
    @include button-hollow;
  } @else if $fill == clear {
    @include button-clear;
  }
}

@mixin button() {
  .button {
    @include button-base;
    @include button-sizes;
    @each $fill in (solid hollow clear) {
      $selector: if($button-fill == $fill, null, ".#{$fill}");
      &#{$selector} {
        @each $key, $value in $button-palette {
          &.#{$key} {
            @include button-fill($fill, $bg-color: $value);
          }
        }
      }
    }
  }
}
